// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

// CreateVirtMInput represents a mutation input for creating virtms.
type CreateVirtMInput struct {
	Hostname string
}

// Mutate applies the CreateVirtMInput on the VirtMMutation builder.
func (i *CreateVirtMInput) Mutate(m *VirtMMutation) {
	m.SetHostname(i.Hostname)
}

// SetInput applies the change-set in the CreateVirtMInput on the VirtMCreate builder.
func (c *VirtMCreate) SetInput(i CreateVirtMInput) *VirtMCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateVirtMInput represents a mutation input for updating virtms.
type UpdateVirtMInput struct {
	Hostname *string
}

// Mutate applies the UpdateVirtMInput on the VirtMMutation builder.
func (i *UpdateVirtMInput) Mutate(m *VirtMMutation) {
	if v := i.Hostname; v != nil {
		m.SetHostname(*v)
	}
}

// SetInput applies the change-set in the UpdateVirtMInput on the VirtMUpdate builder.
func (c *VirtMUpdate) SetInput(i UpdateVirtMInput) *VirtMUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateVirtMInput on the VirtMUpdateOne builder.
func (c *VirtMUpdateOne) SetInput(i UpdateVirtMInput) *VirtMUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
