// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.infratographer.com/example-api/internal/ent/generated/virtm"
	"go.infratographer.com/x/gidx"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[gidx.PrefixedID]
	PageInfo       = entgql.PageInfo[gidx.PrefixedID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// VirtMEdge is the edge representation of VirtM.
type VirtMEdge struct {
	Node   *VirtM `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// VirtMConnection is the connection containing edges to VirtM.
type VirtMConnection struct {
	Edges      []*VirtMEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *VirtMConnection) build(nodes []*VirtM, pager *virtmPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VirtM
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VirtM {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VirtM {
			return nodes[i]
		}
	}
	c.Edges = make([]*VirtMEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VirtMEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VirtMPaginateOption enables pagination customization.
type VirtMPaginateOption func(*virtmPager) error

// WithVirtMOrder configures pagination ordering.
func WithVirtMOrder(order *VirtMOrder) VirtMPaginateOption {
	if order == nil {
		order = DefaultVirtMOrder
	}
	o := *order
	return func(pager *virtmPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVirtMOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVirtMFilter configures pagination filter.
func WithVirtMFilter(filter func(*VirtMQuery) (*VirtMQuery, error)) VirtMPaginateOption {
	return func(pager *virtmPager) error {
		if filter == nil {
			return errors.New("VirtMQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type virtmPager struct {
	reverse bool
	order   *VirtMOrder
	filter  func(*VirtMQuery) (*VirtMQuery, error)
}

func newVirtMPager(opts []VirtMPaginateOption, reverse bool) (*virtmPager, error) {
	pager := &virtmPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVirtMOrder
	}
	return pager, nil
}

func (p *virtmPager) applyFilter(query *VirtMQuery) (*VirtMQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *virtmPager) toCursor(v *VirtM) Cursor {
	return p.order.Field.toCursor(v)
}

func (p *virtmPager) applyCursors(query *VirtMQuery, after, before *Cursor) (*VirtMQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVirtMOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *virtmPager) applyOrder(query *VirtMQuery) *VirtMQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVirtMOrder.Field {
		query = query.Order(DefaultVirtMOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *virtmPager) orderExpr(query *VirtMQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVirtMOrder.Field {
			b.Comma().Ident(DefaultVirtMOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VirtM.
func (v *VirtMQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VirtMPaginateOption,
) (*VirtMConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVirtMPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if v, err = pager.applyFilter(v); err != nil {
		return nil, err
	}
	conn := &VirtMConnection{Edges: []*VirtMEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = v.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if v, err = pager.applyCursors(v, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		v.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := v.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	v = pager.applyOrder(v)
	nodes, err := v.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// VirtMOrderFieldID orders VirtM by id.
	VirtMOrderFieldID = &VirtMOrderField{
		Value: func(v *VirtM) (ent.Value, error) {
			return v.ID, nil
		},
		column: virtm.FieldID,
		toTerm: virtm.ByID,
		toCursor: func(v *VirtM) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.ID,
			}
		},
	}
	// VirtMOrderFieldCreatedAt orders VirtM by created_at.
	VirtMOrderFieldCreatedAt = &VirtMOrderField{
		Value: func(v *VirtM) (ent.Value, error) {
			return v.CreatedAt, nil
		},
		column: virtm.FieldCreatedAt,
		toTerm: virtm.ByCreatedAt,
		toCursor: func(v *VirtM) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.CreatedAt,
			}
		},
	}
	// VirtMOrderFieldUpdatedAt orders VirtM by updated_at.
	VirtMOrderFieldUpdatedAt = &VirtMOrderField{
		Value: func(v *VirtM) (ent.Value, error) {
			return v.UpdatedAt, nil
		},
		column: virtm.FieldUpdatedAt,
		toTerm: virtm.ByUpdatedAt,
		toCursor: func(v *VirtM) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.UpdatedAt,
			}
		},
	}
	// VirtMOrderFieldHostname orders VirtM by hostname.
	VirtMOrderFieldHostname = &VirtMOrderField{
		Value: func(v *VirtM) (ent.Value, error) {
			return v.Hostname, nil
		},
		column: virtm.FieldHostname,
		toTerm: virtm.ByHostname,
		toCursor: func(v *VirtM) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.Hostname,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f VirtMOrderField) String() string {
	var str string
	switch f.column {
	case VirtMOrderFieldID.column:
		str = "ID"
	case VirtMOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case VirtMOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case VirtMOrderFieldHostname.column:
		str = "HOSTNAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f VirtMOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *VirtMOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("VirtMOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *VirtMOrderFieldID
	case "CREATED_AT":
		*f = *VirtMOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *VirtMOrderFieldUpdatedAt
	case "HOSTNAME":
		*f = *VirtMOrderFieldHostname
	default:
		return fmt.Errorf("%s is not a valid VirtMOrderField", str)
	}
	return nil
}

// VirtMOrderField defines the ordering field of VirtM.
type VirtMOrderField struct {
	// Value extracts the ordering value from the given VirtM.
	Value    func(*VirtM) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) virtm.OrderOption
	toCursor func(*VirtM) Cursor
}

// VirtMOrder defines the ordering of VirtM.
type VirtMOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *VirtMOrderField `json:"field"`
}

// DefaultVirtMOrder is the default ordering of VirtM.
var DefaultVirtMOrder = &VirtMOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VirtMOrderField{
		Value: func(v *VirtM) (ent.Value, error) {
			return v.ID, nil
		},
		column: virtm.FieldID,
		toTerm: virtm.ByID,
		toCursor: func(v *VirtM) Cursor {
			return Cursor{ID: v.ID}
		},
	},
}

// ToEdge converts VirtM into VirtMEdge.
func (v *VirtM) ToEdge(order *VirtMOrder) *VirtMEdge {
	if order == nil {
		order = DefaultVirtMOrder
	}
	return &VirtMEdge{
		Node:   v,
		Cursor: order.Field.toCursor(v),
	}
}
