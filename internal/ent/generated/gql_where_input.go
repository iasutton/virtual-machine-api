// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"errors"
	"fmt"
	"time"

	"go.infratographer.com/example-api/internal/ent/generated/predicate"
	"go.infratographer.com/example-api/internal/ent/generated/virtm"
	"go.infratographer.com/x/gidx"
)

// VirtMWhereInput represents a where input for filtering VirtM queries.
type VirtMWhereInput struct {
	Predicates []predicate.VirtM  `json:"-"`
	Not        *VirtMWhereInput   `json:"not,omitempty"`
	Or         []*VirtMWhereInput `json:"or,omitempty"`
	And        []*VirtMWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNEQ   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGT    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGTE   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLT    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLTE   *gidx.PrefixedID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "hostname" field predicates.
	Hostname             *string  `json:"hostname,omitempty"`
	HostnameNEQ          *string  `json:"hostnameNEQ,omitempty"`
	HostnameIn           []string `json:"hostnameIn,omitempty"`
	HostnameNotIn        []string `json:"hostnameNotIn,omitempty"`
	HostnameGT           *string  `json:"hostnameGT,omitempty"`
	HostnameGTE          *string  `json:"hostnameGTE,omitempty"`
	HostnameLT           *string  `json:"hostnameLT,omitempty"`
	HostnameLTE          *string  `json:"hostnameLTE,omitempty"`
	HostnameContains     *string  `json:"hostnameContains,omitempty"`
	HostnameHasPrefix    *string  `json:"hostnameHasPrefix,omitempty"`
	HostnameHasSuffix    *string  `json:"hostnameHasSuffix,omitempty"`
	HostnameEqualFold    *string  `json:"hostnameEqualFold,omitempty"`
	HostnameContainsFold *string  `json:"hostnameContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *VirtMWhereInput) AddPredicates(predicates ...predicate.VirtM) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the VirtMWhereInput filter on the VirtMQuery builder.
func (i *VirtMWhereInput) Filter(q *VirtMQuery) (*VirtMQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyVirtMWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyVirtMWhereInput is returned in case the VirtMWhereInput is empty.
var ErrEmptyVirtMWhereInput = errors.New("generated: empty predicate VirtMWhereInput")

// P returns a predicate for filtering virtms.
// An error is returned if the input is empty or invalid.
func (i *VirtMWhereInput) P() (predicate.VirtM, error) {
	var predicates []predicate.VirtM
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, virtm.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.VirtM, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, virtm.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.VirtM, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, virtm.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, virtm.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, virtm.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, virtm.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, virtm.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, virtm.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, virtm.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, virtm.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, virtm.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, virtm.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, virtm.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, virtm.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, virtm.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, virtm.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, virtm.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, virtm.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, virtm.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, virtm.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, virtm.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, virtm.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, virtm.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, virtm.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, virtm.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, virtm.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, virtm.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Hostname != nil {
		predicates = append(predicates, virtm.HostnameEQ(*i.Hostname))
	}
	if i.HostnameNEQ != nil {
		predicates = append(predicates, virtm.HostnameNEQ(*i.HostnameNEQ))
	}
	if len(i.HostnameIn) > 0 {
		predicates = append(predicates, virtm.HostnameIn(i.HostnameIn...))
	}
	if len(i.HostnameNotIn) > 0 {
		predicates = append(predicates, virtm.HostnameNotIn(i.HostnameNotIn...))
	}
	if i.HostnameGT != nil {
		predicates = append(predicates, virtm.HostnameGT(*i.HostnameGT))
	}
	if i.HostnameGTE != nil {
		predicates = append(predicates, virtm.HostnameGTE(*i.HostnameGTE))
	}
	if i.HostnameLT != nil {
		predicates = append(predicates, virtm.HostnameLT(*i.HostnameLT))
	}
	if i.HostnameLTE != nil {
		predicates = append(predicates, virtm.HostnameLTE(*i.HostnameLTE))
	}
	if i.HostnameContains != nil {
		predicates = append(predicates, virtm.HostnameContains(*i.HostnameContains))
	}
	if i.HostnameHasPrefix != nil {
		predicates = append(predicates, virtm.HostnameHasPrefix(*i.HostnameHasPrefix))
	}
	if i.HostnameHasSuffix != nil {
		predicates = append(predicates, virtm.HostnameHasSuffix(*i.HostnameHasSuffix))
	}
	if i.HostnameEqualFold != nil {
		predicates = append(predicates, virtm.HostnameEqualFold(*i.HostnameEqualFold))
	}
	if i.HostnameContainsFold != nil {
		predicates = append(predicates, virtm.HostnameContainsFold(*i.HostnameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyVirtMWhereInput
	case 1:
		return predicates[0], nil
	default:
		return virtm.And(predicates...), nil
	}
}
